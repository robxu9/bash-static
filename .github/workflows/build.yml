name: build

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            arch: x86_64
          - os: macos-latest
            target: macos
            arch: x86_64
          - os: macos-latest
            target: macos
            arch: aarch64
    steps:
    - uses: actions/checkout@v3
    - name: install apt packages
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq build-essential gpg
    - name: install msys2 packages
      if: ${{ matrix.os == 'windows-latest' }}
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          git
          gnupg
    - name: install homebrew packages
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install gnupg autoconf
    - name: build
      run: ./build.sh ${{matrix.target}} ${{matrix.arch}} && mv -v releases/bash releases/bash-${{matrix.target}}-${{matrix.arch}}
      shell: bash
    - uses: actions/upload-artifact@v3  
      with:
        name: bash-${{matrix.target}}-${{matrix.arch}}
        path: releases/bash-${{matrix.target}}-${{matrix.arch}}
  docker-build: 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv6, armv7, aarch64, ppc64le, s390x]
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2.4.0
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/data"

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apk update
            apk add alpine-sdk gnupg git bash autoconf bison

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /data && ./build.sh linux ${{matrix.arch}} && mv -v releases/bash releases/bash-linux-${{matrix.arch}}
      - uses: actions/upload-artifact@v3  
        with:
          name: bash-linux-${{matrix.arch}}
          path: releases/bash-linux-${{matrix.arch}}
  # macos-universal:
  #   needs:
  #     - build
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         path: artifacts
  #     - name: make executable
  #       run: chmod +x artifacts/* && ls -al && ls -al artifacts/
  #     - name: run lipo to create universal binary
  #       run: lipo -arch x86_64 artifacts/bash-macos-x86_64 -arch arm64 artifacts/bash-macos-aarch64 -create -output bash-macos-universal
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: bash-macos-universal
  #         path: bash-macos-universal
  release:
    needs:
      - build
      - docker-build
      # - macos-universal
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: generate changelog
        run: ./changelog.sh
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: make executable
        run: chmod +x artifacts/*
      - name: create release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
          body_path: NOTES.txt
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
